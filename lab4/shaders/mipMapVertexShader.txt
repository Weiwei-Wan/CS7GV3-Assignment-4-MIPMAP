#version 330

in vec3 vertex_position;
in vec3 vertex_normal;
in vec2 vertex_texture;
in vec3 aTangent;
in vec3 aBitangent;

uniform mat4 view;
uniform mat4 proj;
uniform mat4 model;
uniform vec3 lightPos;
uniform vec3 viewPos;

out vec3 FragPos;
out vec2 TexCoords;
out vec3 TangentLightPos;
out vec3 TangentViewPos;
out vec3 TangentFragPos;

void main() {
    FragPos = vec3(model * vec4(vertex_position, 1.0));   
    TexCoords = vertex_texture;
    
    mat3 normalMatrix = transpose(inverse(mat3(model)));
    vec3 T = normalize(normalMatrix * aTangent);
    vec3 N = normalize(normalMatrix * vertex_normal);
    T = normalize(T - dot(T, N) * N);
    vec3 B = cross(N, T);
    mat3 TBN = transpose(mat3(T, B, N));    
    TangentLightPos = TBN * lightPos;
    TangentViewPos  = TBN * viewPos;
    TangentFragPos  = TBN * FragPos;

    gl_Position =  proj * view * model * vec4(vertex_position,1.0);

}
